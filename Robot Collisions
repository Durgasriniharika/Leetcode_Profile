vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        int n=positions.size();
        vector<vector<int>>robo;

        for(int i=0;i<n;i++){
            robo.push_back({positions[i],healths[i],directions[i], i});
        }
        sort(robo.begin(),robo.end());

        vector<vector<int>>st;

        for(auto r:robo){
            if(r[2]=='R' || st.empty() || st.back()[2]=='L'){
               st.push_back(r);
               continue;
            }
            if(r[2]=='L'){
                bool flag=true;
                while(!st.empty() && st.back()[2]=='R' && flag){
                    int last=st.back()[1];
                    if(r[1]>last){
                        st.pop_back();
                        r[1]-=1;
                    }
                    else if(r[1]<last){
                        st.back()[1]-=1;
                        flag=false;
                    }
                    else{
                        st.pop_back();
                        flag=false;
                    }
                }
                if(flag){
                    st.push_back(r);
                }
            }
        }
        vector<int>ans;
        sort(st.begin(),st.end(), [](vector<int>&a, vector<int>&b){
            return a[3]<b[3];
        });

        for(auto r:st){
            ans.push_back(r[1]);
        }
        return ans;
    }
