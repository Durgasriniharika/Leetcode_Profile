class Solution {
public:
   string helper(int n, vector<string>& less_than_20, vector<string>& tens) {
        if(n==0) return "";
        else if(n<20) {
            return less_than_20[n]+ " ";
        } else if(n<100) {
            return tens[n/10]+" "+helper(n%10,less_than_20,tens);
        } else {
            return less_than_20[n/100]+" Hundred "+helper(n%100,less_than_20,tens);
        }
    }
    string numberToWords(int num) {
        if(num==0) return "Zero";

        vector<string>less_than_20{"", "One", "Two", "Three", "Four", "Five", "Six", "Seven",
                                    "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen",
                                    "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        vector<string>tens{"","Ten","Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy",
                            "Eighty", "Ninety"};
        vector<string>thousand{"", "Thousand", "Million", "Billion"};

        int i=0;
        string word;
        while(num>0) {
            if(num%1000!=0) {
                word=helper(num%1000,less_than_20,tens)+thousand[i]+" "+word;
            }
            num/=1000;
            i++;
        }
        while(word.back()==' ') word.pop_back();
        return word;
    }
};
